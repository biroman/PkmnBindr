rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(resource).data.some_field == true
// allow read, write: if request.auth.uid == firestore.get(resource).data.author_uid

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is owner (role-based)
    function isOwner() {
      return request.auth != null && 
             request.auth.uid != null &&
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.get('role', 'user') == 'owner';
    }

    // Profile images - users can upload and manage their own profile pictures
    match /profile-images/{userId}/{allPaths=**} {
      // Allow users to read and write their own profile images
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow owners to read/write all profile images (for moderation)
      allow read, write: if isOwner();
      
      // Validate file size and type on upload with strict content type checking
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      // File size limit: 5MB (reduced for better performance)
                      request.resource.size <= 5 * 1024 * 1024 &&
                      // Strict content type validation: only JPEG, PNG, and WebP
                      (request.resource.contentType == 'image/jpeg' ||
                       request.resource.contentType == 'image/jpg' ||
                       request.resource.contentType == 'image/png' ||
                       request.resource.contentType == 'image/webp') &&
                      // Rate limiting check via Firestore (checked in client)
                      firestore.exists(/databases/(default)/documents/userUploadLimits/$(request.auth.uid)) == false ||
                      firestore.get(/databases/(default)/documents/userUploadLimits/$(request.auth.uid)).data.canUpload == true;
    }

    // Card images - for future use when users upload custom card images
    match /card-images/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, write: if isOwner();
      
      // Validate file uploads
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size <= 5 * 1024 * 1024 &&
                      request.resource.contentType.matches('image/.*');
    }

    // Public assets - read-only for authenticated users
    match /public/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if isOwner();
    }

    // Deny access to all other files
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 